I am building a Decentralized Identity and Verifiable Credentials (DID + VC) DApp frontend using React, Tailwind CSS, and shadcn/ui. The app allows users to control their digital identity (DID), store multiple verifiable credentials (degree, PAN, license, etc.), and share them with verifiers upon request. It integrates with MetaMask for login.

⚠️ Important: Only generate JavaScript code (not TypeScript). All files and components must be in plain JavaScript.

Please create a modern website frontend with the following structure and pages:

1. Landing Page (Home Page)

Navbar: Logo + menu (Features, How it Works, Docs, Login) + "Get Started" button.

Hero Section: Bold tagline + sub-text + two CTA buttons → "Login as User" & "Login as Verifier".

Features Section: Cards with icons for Self-Sovereign Identity, Verifiable Credentials, Privacy with Zero-Knowledge Proofs.

How It Works Section: 3-step illustration (Store credentials → Request → Approve & Verify).

Footer: Links (GitHub, Docs, Community, Email).

2. User Dashboard (after MetaMask login)

Sidebar navigation: Dashboard | My Credentials | Requests | Settings | Logout.

Dashboard Overview: Greeting, DID displayed, quick stats (credentials + requests).

My Credentials: Grid/list of credential cards with details + "Share" button. Option to "Add Credential".

When an Issuer issues a credential, it should appear automatically here.

Requests: List of incoming verification requests with Approve / Reject buttons.

3. Verifier Dashboard (after MetaMask login as Verifier)

Sidebar navigation: Dashboard | Search DID | Verification Requests | Settings.

Search DID: Input box for DID + dropdown for credential type + "Send Verification Request" button.

Verification Requests: Table of requests sent, showing status (Pending / Approved / Rejected).

4. Issuer Dashboard

Page for institutions to issue credentials.

Form fields: Name, Type of Credential, Expiry, Metadata.

“Issue Credential” button → once issued, the credential should go directly to the User’s wallet/DID.

Design Requirements

Dark mode first, Web3-style (black background + purple/blue gradients).

Rounded buttons with glowing hover effects.

Smooth animations (Framer Motion).

Icons from lucide-react.

Use shadcn/ui components for cards, buttons, sidebar, navbar.

Keep everything clean, modular, and component-based.

⚡ The frontend should look like a professional Web3 dashboard product with reusable React components.